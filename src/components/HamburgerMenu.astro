---

interface Props {
  links: { href: string; label: string }[];
}

const { links } = Astro.props;
---

<div class="md:hidden">
  <button id="hamburger-button" class="focus:outline-none z-50 relative">
    <svg class="w-6 h-6 text-[#1a1a1a]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path id="hamburger-icon" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <div id="mobile-menu" class="fixed left-0 right-0 bg-white shadow-lg hidden overflow-y-auto transition-all duration-300" style="top: 56px; z-index: 9999; max-height: calc(100vh - 56px);">
    <nav class="py-8 px-6">
      <ul class="flex flex-col gap-6">
        {links.map(l => (
          <li class="border-b border-gray-100 pb-4 last:border-b-0">
            <a class="text-xl font-medium text-[#1a1a1a] hover:text-[var(--color-accent-blue)] transition-colors duration-300 block" href={l.href}>
              {l.label}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const hamburgerButton = document.getElementById('hamburger-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
 
    if (!hamburgerButton || !mobileMenu || !hamburgerIcon) return;

    hamburgerButton.addEventListener('click', () => {
      const isHidden = mobileMenu.classList.contains('hidden');
      
      if (isHidden) {
        // Open menu
        mobileMenu.classList.remove('hidden');
        hamburgerIcon.setAttribute('d', 'M6 18L18 6M6 6l12 12'); // X icon
      } else {
        // Close menu
        mobileMenu.classList.add('hidden');
        hamburgerIcon.setAttribute('d', 'M4 6h16M4 12h16M4 18h16'); // Hamburger icon
      }
    });

    // Close menu when a link is clicked
    mobileMenu.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
      });
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!mobileMenu.classList.contains('hidden') && 
          !mobileMenu.contains(e.target) && 
          !hamburgerButton.contains(e.target)) {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
      }
    });
  });
</script>

<style>
  /* Add any specific styles for the hamburger menu here if needed */
</style>
