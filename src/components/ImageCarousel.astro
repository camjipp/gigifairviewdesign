---
interface Props {
  images: { src: string; alt: string }[];
  autoplay?: boolean;
  interval?: number; // milliseconds
}

const { images, autoplay = true, interval = 4000 } = Astro.props;

const id = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<div id={id} class="relative w-full overflow-hidden aspect-video">
  {images.map((image, index) => (
    <img
      src={image.src}
      alt={image.alt}
      class={`absolute top-0 left-0 w-full h-full object-cover opacity-0 transition-opacity duration-1000 ease-in-out`}
      data-index={index}
    />
  ))}

  <!-- Navigation Dots -->
  <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
    {images.map((_, index) => (
      <button
        class={`w-2.5 h-2.5 rounded-full bg-white bg-opacity-50 transition-all duration-300 ${index === 0 ? 'bg-opacity-100 scale-125' : ''}`}
        data-dot-index={index}
      ></button>
    ))}
  </div>

  <!-- Arrows -->
  <button class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-300 z-10" aria-label="Previous Image" data-direction="prev">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
  </button>
  <button class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-300 z-10" aria-label="Next Image" data-direction="next">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>
  </button>
</div>

<script define:vars={{ id, images, autoplay, interval }}>
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.getElementById(id);
    if (!carousel) return;

    const slides = Array.from(carousel.querySelectorAll('img'));
    const dots = Array.from(carousel.querySelectorAll('[data-dot-index]'));
    const prevButton = carousel.querySelector('[data-direction="prev"]');
    const nextButton = carousel.querySelector('[data-direction="next"]');

    let currentIndex = 0;
    let autoPlayInterval;

    const showSlide = (index) => {
      slides.forEach((slide, i) => {
        slide.classList.remove('opacity-100');
        slide.classList.add('opacity-0');
        if (i === index) {
          slide.classList.add('opacity-100');
          slide.classList.remove('opacity-0');
        }
      });
      dots.forEach((dot, i) => {
        dot.classList.remove('bg-opacity-100', 'scale-125');
        if (i === index) {
          dot.classList.add('bg-opacity-100', 'scale-125');
        }
      });
      currentIndex = index;
    };

    const nextSlide = () => {
      let newIndex = (currentIndex + 1) % slides.length;
      showSlide(newIndex);
    };

    const prevSlide = () => {
      let newIndex = (currentIndex - 1 + slides.length) % slides.length;
      showSlide(newIndex);
    };

    const startAutoplay = () => {
      if (autoplay && images.length > 1) {
        autoPlayInterval = setInterval(nextSlide, interval);
      }
    };

    const stopAutoplay = () => {
      clearInterval(autoPlayInterval);
    };

    // Event Listeners
    prevButton.addEventListener('click', () => {
      stopAutoplay();
      prevSlide();
      startAutoplay();
    });
    nextButton.addEventListener('click', () => {
      stopAutoplay();
      nextSlide();
      startAutoplay();
    });
    dots.forEach(dot => {
      dot.addEventListener('click', (e) => {
        stopAutoplay();
        const dotIndex = parseInt(e.target.dataset.dotIndex);
        showSlide(dotIndex);
        startAutoplay();
      });
    });

    // Initial setup
    showSlide(currentIndex);
    startAutoplay();

    // Stop autoplay on hover over carousel for better UX
    carousel.addEventListener('mouseenter', stopAutoplay);
    carousel.addEventListener('mouseleave', startAutoplay);
  });
</script>
